/*
 * AUTOGENERATED - DO NOT EDIT
 *
 * This file is generated from text-input-unstable-v2.xml
 * To regenerate, run the “refresh-wayland-wrapper” target.
 */

#ifndef MIR_FRONTEND_WAYLAND_TEXT_INPUT_UNSTABLE_V2_XML_WRAPPER
#define MIR_FRONTEND_WAYLAND_TEXT_INPUT_UNSTABLE_V2_XML_WRAPPER

#include <optional>

#include "mir/fd.h"
#include <wayland-server-core.h>

#include "mir/wayland/wayland_base.h"

namespace mir
{
namespace wayland
{

class TextInputV2;
class TextInputManagerV2;

class TextInputV2 : public Resource
{
public:
    static char const constexpr* interface_name = "zwp_text_input_v2";

    static TextInputV2* from(struct wl_resource*);

    TextInputV2(struct wl_resource* resource, Version<1>);
    virtual ~TextInputV2();

    void send_enter_event(uint32_t serial, struct wl_resource* surface) const;
    void send_leave_event(uint32_t serial, struct wl_resource* surface) const;
    void send_input_panel_state_event(uint32_t state, int32_t x, int32_t y, int32_t width, int32_t height) const;
    void send_preedit_string_event(std::string const& text, std::string const& commit) const;
    void send_preedit_styling_event(uint32_t index, uint32_t length, uint32_t style) const;
    void send_preedit_cursor_event(int32_t index) const;
    void send_commit_string_event(std::string const& text) const;
    void send_cursor_position_event(int32_t index, int32_t anchor) const;
    void send_delete_surrounding_text_event(uint32_t before_length, uint32_t after_length) const;
    void send_modifiers_map_event(struct wl_array* map) const;
    void send_keysym_event(uint32_t time, uint32_t sym, uint32_t state, uint32_t modifiers) const;
    void send_language_event(std::string const& language) const;
    void send_text_direction_event(uint32_t direction) const;
    void send_configure_surrounding_text_event(int32_t before_cursor, int32_t after_cursor) const;
    void send_input_method_changed_event(uint32_t serial, uint32_t flags) const;

    struct wl_client* const client;
    struct wl_resource* const resource;

    struct ContentHint
    {
        static uint32_t const none = 0x0;
        static uint32_t const auto_completion = 0x1;
        static uint32_t const auto_correction = 0x2;
        static uint32_t const auto_capitalization = 0x4;
        static uint32_t const lowercase = 0x8;
        static uint32_t const uppercase = 0x10;
        static uint32_t const titlecase = 0x20;
        static uint32_t const hidden_text = 0x40;
        static uint32_t const sensitive_data = 0x80;
        static uint32_t const latin = 0x100;
        static uint32_t const multiline = 0x200;
    };

    struct ContentPurpose
    {
        static uint32_t const normal = 0;
        static uint32_t const alpha = 1;
        static uint32_t const digits = 2;
        static uint32_t const number = 3;
        static uint32_t const phone = 4;
        static uint32_t const url = 5;
        static uint32_t const email = 6;
        static uint32_t const name = 7;
        static uint32_t const password = 8;
        static uint32_t const date = 9;
        static uint32_t const time = 10;
        static uint32_t const datetime = 11;
        static uint32_t const terminal = 12;
    };

    struct UpdateState
    {
        static uint32_t const change = 0;
        static uint32_t const full = 1;
        static uint32_t const reset = 2;
        static uint32_t const enter = 3;
    };

    struct InputPanelVisibility
    {
        static uint32_t const hidden = 0;
        static uint32_t const visible = 1;
    };

    struct PreeditStyle
    {
        static uint32_t const default_ = 0;
        static uint32_t const none = 1;
        static uint32_t const active = 2;
        static uint32_t const inactive = 3;
        static uint32_t const highlight = 4;
        static uint32_t const underline = 5;
        static uint32_t const selection = 6;
        static uint32_t const incorrect = 7;
    };

    struct TextDirection
    {
        static uint32_t const auto_ = 0;
        static uint32_t const ltr = 1;
        static uint32_t const rtl = 2;
    };

    struct Opcode
    {
        static uint32_t const enter = 0;
        static uint32_t const leave = 1;
        static uint32_t const input_panel_state = 2;
        static uint32_t const preedit_string = 3;
        static uint32_t const preedit_styling = 4;
        static uint32_t const preedit_cursor = 5;
        static uint32_t const commit_string = 6;
        static uint32_t const cursor_position = 7;
        static uint32_t const delete_surrounding_text = 8;
        static uint32_t const modifiers_map = 9;
        static uint32_t const keysym = 10;
        static uint32_t const language = 11;
        static uint32_t const text_direction = 12;
        static uint32_t const configure_surrounding_text = 13;
        static uint32_t const input_method_changed = 14;
    };

    struct Thunks;

    static bool is_instance(wl_resource* resource);

private:
    virtual void enable(struct wl_resource* surface) = 0;
    virtual void disable(struct wl_resource* surface) = 0;
    virtual void show_input_panel() = 0;
    virtual void hide_input_panel() = 0;
    virtual void set_surrounding_text(std::string const& text, int32_t cursor, int32_t anchor) = 0;
    virtual void set_content_type(uint32_t hint, uint32_t purpose) = 0;
    virtual void set_cursor_rectangle(int32_t x, int32_t y, int32_t width, int32_t height) = 0;
    virtual void set_preferred_language(std::string const& language) = 0;
    virtual void update_state(uint32_t serial, uint32_t reason) = 0;
};

class TextInputManagerV2 : public Resource
{
public:
    static char const constexpr* interface_name = "zwp_text_input_manager_v2";

    static TextInputManagerV2* from(struct wl_resource*);

    TextInputManagerV2(struct wl_resource* resource, Version<1>);
    virtual ~TextInputManagerV2();

    struct wl_client* const client;
    struct wl_resource* const resource;

    struct Thunks;

    static bool is_instance(wl_resource* resource);

    class Global : public wayland::Global
    {
    public:
        Global(wl_display* display, Version<1>);

        auto interface_name() const -> char const* override;

    private:
        virtual void bind(wl_resource* new_zwp_text_input_manager_v2) = 0;
        friend TextInputManagerV2::Thunks;
    };

private:
    virtual void get_text_input(struct wl_resource* id, struct wl_resource* seat) = 0;
};

}
}

#endif // MIR_FRONTEND_WAYLAND_TEXT_INPUT_UNSTABLE_V2_XML_WRAPPER
