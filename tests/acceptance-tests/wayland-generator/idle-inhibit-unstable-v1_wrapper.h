/*
 * AUTOGENERATED - DO NOT EDIT
 *
 * This file is generated from idle-inhibit-unstable-v1.xml
 * To regenerate, run the “refresh-wayland-wrapper” target.
 */

#ifndef MIR_FRONTEND_WAYLAND_IDLE_INHIBIT_UNSTABLE_V1_XML_WRAPPER
#define MIR_FRONTEND_WAYLAND_IDLE_INHIBIT_UNSTABLE_V1_XML_WRAPPER

#include <optional>

#include "mir/fd.h"
#include <wayland-server-core.h>

#include "mir/wayland/wayland_base.h"

namespace mir
{
namespace wayland
{

class IdleInhibitManagerV1;
class IdleInhibitorV1;

class IdleInhibitManagerV1 : public Resource
{
public:
    static char const constexpr* interface_name = "zwp_idle_inhibit_manager_v1";

    static IdleInhibitManagerV1* from(struct wl_resource*);

    IdleInhibitManagerV1(struct wl_resource* resource, Version<1>);
    virtual ~IdleInhibitManagerV1();

    struct wl_client* const client;
    struct wl_resource* const resource;

    struct Thunks;

    static bool is_instance(wl_resource* resource);

    class Global : public wayland::Global
    {
    public:
        Global(wl_display* display, Version<1>);

        auto interface_name() const -> char const* override;

    private:
        virtual void bind(wl_resource* new_zwp_idle_inhibit_manager_v1) = 0;
        friend IdleInhibitManagerV1::Thunks;
    };

private:
    virtual void create_inhibitor(struct wl_resource* id, struct wl_resource* surface) = 0;
};

class IdleInhibitorV1 : public Resource
{
public:
    static char const constexpr* interface_name = "zwp_idle_inhibitor_v1";

    static IdleInhibitorV1* from(struct wl_resource*);

    IdleInhibitorV1(struct wl_resource* resource, Version<1>);
    virtual ~IdleInhibitorV1();

    struct wl_client* const client;
    struct wl_resource* const resource;

    struct Thunks;

    static bool is_instance(wl_resource* resource);

private:
};

}
}

#endif // MIR_FRONTEND_WAYLAND_IDLE_INHIBIT_UNSTABLE_V1_XML_WRAPPER